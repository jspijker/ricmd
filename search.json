[{"path":"/articles/ricmd.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ricmd","text":"integrated Rule Oriented Data System (iRODS) open source data management software. used research organisations governmental institutes important role ever growing data services. package provides R user interface iRODS implements basic functionality working iRODS collections data objects R. Whith package possible create, modify, remove collections data objects iRODS Zone. data objects also possible add, remove modify meta data called attribute-value-unit (AVU) tripples. information see iRODS documentation package based python irodsclient uses reticulate interact library. functions package start ri_ prefix, prevents hiding functions packages makes code readable.","code":""},{"path":"/articles/ricmd.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"prerequisites","title":"ricmd","text":"package requires python-irodsclient library installed. developped tested using python version >3. Use pip install library: package uses iRODS environment files ~/.irods/, files contain user credentials needed connect iRODS. user set iRODS environment can use package. user can use called ‘commands’, package also function properly.","code":"pip3 install python-irodsclient"},{"path":"/articles/ricmd.html","id":"zones-collections-data-objects-and-meta-data","dir":"Articles","previous_headings":"","what":"Zones, collections, data objects and meta data","title":"ricmd","text":"understand use package basic understanding iRODS needed. short version remember : iRODS system ‘zone’, zones data collections exists data collection contains many data objects. data object contains meta data called Attribute-Value-Unit (AVU) tripples. longer version ’s beyond scope vignette, please see iRODS documentation.","code":""},{"path":"/articles/ricmd.html","id":"zones","dir":"Articles","previous_headings":"Zones, collections, data objects and meta data","what":"Zones","title":"ricmd","text":"Zone independent iRODS system contains data catalog one iRODS servers. iRODS implementation can contain multiple zones, vignette assume single zone implementation.","code":""},{"path":"/articles/ricmd.html","id":"collections","dir":"Articles","previous_headings":"Zones, collections, data objects and meta data","what":"Collections","title":"ricmd","text":"Zone can contain collections collection can contain one sub collections. Collections way store data hierarchical structure like directories folders. package uses default collection, must set manually. manipulate (store/retrieve etc) data objects, assumed exists default collection, unless provide specific collection function arguments.","code":""},{"path":"/articles/ricmd.html","id":"data-objects","dir":"Articles","previous_headings":"Zones, collections, data objects and meta data","what":"Data objects","title":"ricmd","text":"Collection can contain multiple data objects, like files folder directory. Although somewhat different, data object can considered normal file.","code":""},{"path":"/articles/ricmd.html","id":"meta-data","dir":"Articles","previous_headings":"Zones, collections, data objects and meta data","what":"Meta data","title":"ricmd","text":"Meta data stored AVU tripples. Many objects iRODS, like users, collections, resources can contain meta data package considers meta data associated data objects. AVU triples must contain attribute value, unit optional. Within iRODS possible search query data objects based values AVU triples. search options yet implemented package.","code":""},{"path":"/articles/ricmd.html","id":"initialise-an-irods-session","dir":"Articles","previous_headings":"","what":"Initialise an iRODS session","title":"ricmd","text":", now know basics let’s start iRODS session. assume iRODS environment set properly python iRODS client place. start iRODS session within R exexcute following command. irods_env_file usually points ~/.irods/irods_environment.json. Executing command creates hidden environment wich contains iRODS configuration session object. session object refers session class pyton library contains methods working iRODS. initiating iRODS session one must set default collection. case use home collection user asume variables irods_zone irods_user contain name iRODS zone user respectively. name collection always start name zone, case ‘/tempZone’ (mind ‘/’ beginning). use standard collection default iRODS installation username ‘devel’, hence ‘home/devel’. default collection can changed anytime script. want check collection default collection, use:","code":"library(ricmd) ri_session(irods_env_file) my_collection <- file.path(\"\",irods_zone, \"home\", irods_user) my_collection #> [1] \"/tempZone/home/rods\" ri_setCollection(my_collection) ri_getCollection() #> [1] \"/tempZone/home/rods\""},{"path":"/articles/ricmd.html","id":"creating-a-new-collection","dir":"Articles","previous_headings":"","what":"Creating a new collection","title":"ricmd","text":"new data collection can created argument ri_createCollection full path new collection. collection allready exists, error follow. Since created new collection inside default collection, can show using ri_listSubCollections command: remove collection, ri_removeCollection command can used:","code":"test_collection <- file.path(my_collection, \"tests\") ri_createCollection(test_collection) #> Error in ri_createCollection(test_collection): ri_createCollection: collection allready exists ri_listSubCollections() #> [1] \"tests\" ri_removeCollection(test_collection)"},{"path":[]},{"path":"/articles/ricmd.html","id":"data-objects-vs-local-files","dir":"Articles","previous_headings":"Creating data objects","what":"Data objects vs local files","title":"ricmd","text":"Data objects iRODS can regarded files (although, technically completely true). One can store local file disk data object data collection iRODS. Also, data object can retrieved iRODS stored file local disk. Storing retrieving iRODS called put get respectively. default data object stored retrieved default collection set ri\\_setCollection. equivalent approach can followed files stored disk. good practice seperate data code.means data always written different location (directory) current working directory, contains code. Using ri\\_setDatadir function one can set location files stored local file system ricmd package uses directory default. demonstrate , first create temporary data directory store data file directory: set data directory default location local files","code":"testDatadir <- file.path(tempdir(), 'data') dir.create(testDatadir)  x <- rnorm(10) saveRDS(x,file.path(testDatadir, \"datafile.rds\")) ri_setDatadir(testDatadir)"},{"path":"/articles/ricmd.html","id":"store-data-objects","dir":"Articles","previous_headings":"Creating data objects","what":"Store data objects","title":"ricmd","text":"storing data objects iRODS can use ri_put command. next example use test collection created default collection. stores datafile.rds file object default collection. see list stored objects ri_listDataObjects function available Overwriting existing object allowed, results error. Using overwrite=TRUE argument, overwriting objects can forced Now data stored iRODS can remove local file want.","code":"ri_setCollection(test_collection) ri_put(filename = file.path(testDatadir, \"datafile.rds\")) #> Error in ri_put(filename = file.path(testDatadir, \"datafile.rds\")): ri_put: object allready exists and overwrite is FALSE ri_listDataObjects() #> [1] \"datafile.rds\" # results in an error try(ri_put(filename = file.path(testDatadir, \"datafile.rds\"))) #> Error in ri_put(filename = file.path(testDatadir, \"datafile.rds\")) :  #>   ri_put: object allready exists and overwrite is FALSE  # this works ri_put(filename = file.path(testDatadir, \"datafile.rds\"), overwrite = TRUE) unlink(file.path(testDatadir, \"datafile.rds\"))"},{"path":"/articles/ricmd.html","id":"retreive-data-objects","dir":"Articles","previous_headings":"Creating data objects","what":"Retreive data objects","title":"ricmd","text":"get (retrieve) data object created last section, use ri_get() function. default, functions stores file locally data directory defined . now can read process data want store file location, using different filename, can use datadir filename arguments function ri_get overwrite existing files default. want get data object either overwrite existing file rename ","code":"ri_get(\"datafile.rds\") x <- readRDS(file.path(testDatadir, \"datafile.rds\")) print(length(x)) #> [1] 10 ri_get(\"datafile.rds\", datadir = \"/path/to/other/directory\",     filename = \"differentFileName.rds\") # the file allready exists, so this results in an error try(ri_get(\"datafile.rds\")) #> Error in ri_get(\"datafile.rds\") :  #>   ri_get: file allready exists in data directory and overwrite=FALSE  # overwrite te file ri_get(\"datafile.rds\", overwrite = TRUE)  # or use different file anme ri_get(\"datafile.rds\", filename = \"datafile2.rds\")"},{"path":"/articles/ricmd.html","id":"manage-meta-data","dir":"Articles","previous_headings":"","what":"Manage meta data","title":"ricmd","text":"iRODS meta data, AVU tripple, can associated users, collections data objects. package supports meta data data objects. Meta data collections, users etc. supported. AVU triple must unique combination attribute, value, unit. two tripples attribute, value must differ, , tripples attribute value, unit must differ. add meta data object, use ri_metaAdd function. want add meta data datafile.rds data object created , execute: command assume datafile.rds default collection. AVU triple, must provide attribute value. unit optional defaults NULL. want add meta data object different collection, must provide collection argument: ri_metaGet can get meta data object data.frame attribute, value, units fields. data.frame contains row attribute existing meta data. data.frame gives NA values units NULL. can also delete meta triples object.","code":"ri_metaAdd(object = \"datafile.rds\", attribute = \"attr1\", value = \"val1\") ri_metaAdd(object = \"otherObject\", attribute = \"attr1\", value = \"val4\",            collection = \"/zone/otherCollection\") # first add some more meta data ri_metaAdd(object = \"datafile.rds\", attribute = \"attr2\", value = \"val2\") ri_metaAdd(object = \"datafile.rds\", attribute = \"attr3\", value = \"val3\", units = \"unit1\")  # get meta data meta <- ri_metaGet(\"datafile.rds\") print(meta) #>   attribute value units #> 1     attr1  val1  <NA> #> 2     attr2  val2  <NA> #> 3     attr3  val3 unit1 ri_metaRemove(\"datafile.rds\", attribute  = \"attr3\", value = \"val3\", units = \"unit1\") #> NULL meta <- ri_metaGet(\"datafile.rds\") print(meta) #>   attribute value units #> 1     attr1  val1  <NA> #> 2     attr2  val2  <NA>"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Job Spijker. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Spijker J (2025). ricmd: R package iRODS commands. R package version 1.0.0.","code":"@Manual{,   title = {ricmd: R package for iRODS commands},   author = {Job Spijker},   year = {2025},   note = {R package version 1.0.0}, }"},{"path":"/index.html","id":"ricmd","dir":"","previous_headings":"","what":"R package for iRODS commands","title":"R package for iRODS commands","text":"R package iRODS icommands. R package interface R iRODS integrated Rule Oriented Data System.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R package for iRODS commands","text":"package tries implement core functionality work iRODS collections within R. package can: - Connect iRODS Zone - Create remove collections - store retrieve data collection - add remove meta data data objects","code":""},{"path":"/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"prerequisites","title":"R package for iRODS commands","text":"package run need Python3. package based python irodsclient uses reticulate interact library. also need access iRODS zone make sure iRODS environment set properly. package developed tested Linux systems. want use MacOS Windows, ’re .","code":""},{"path":"/index.html","id":"release","dir":"","previous_headings":"","what":"Release","title":"R package for iRODS commands","text":"current release version 1.0.0. Version numbers follow major.minor.patch versioning system. Please, see [NEWS] (https://github.com/jspijker/ricmd/blob/master/NEWS.md) file release info.","code":""},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"R package for iRODS commands","text":"package still development new features added future. example meta data management collections search queries meta data anticipated. latest features can found development branches package. package contains tests. However, tests run successfully speficic testing environment iRODS install needed.","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"R package for iRODS commands","text":"package (yet) available CRAN, can install directly GitHub: read vignette:","code":"remotes::install_github(\"jspijker/ricmd\",build_vignettes=TRUE) vignette(\"ricmd\")"},{"path":"/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"R package for iRODS commands","text":"package publicly available GPL 3.0 licence, please see accompanying LICENCE file.","code":""},{"path":"/reference/ri_collectionExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if collection exists — ri_collectionExists","title":"Test if collection exists — ri_collectionExists","text":"function test collection exists. collection must given full path collection.","code":""},{"path":"/reference/ri_collectionExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if collection exists — ri_collectionExists","text":"","code":"ri_collectionExists(collection)"},{"path":"/reference/ri_collectionExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if collection exists — ri_collectionExists","text":"collection name collection","code":""},{"path":"/reference/ri_collectionExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if collection exists — ri_collectionExists","text":"TRUE collection exists, FALSE otherwise","code":""},{"path":"/reference/ri_createCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new IRODS collection — ri_createCollection","title":"Create a new IRODS collection — ri_createCollection","text":"function creates new collection iRODS. collection must provided full path. collection created, function generates error.","code":""},{"path":"/reference/ri_createCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new IRODS collection — ri_createCollection","text":"","code":"ri_createCollection(collection)"},{"path":"/reference/ri_createCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new IRODS collection — ri_createCollection","text":"collection path new collection","code":""},{"path":"/reference/ri_createCollection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new IRODS collection — ri_createCollection","text":"nothing","code":""},{"path":"/reference/ri_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get object from iRODS collection — ri_get","title":"Get object from iRODS collection — ri_get","text":"Get object iRODS collection. collection given, uses default collection.","code":""},{"path":"/reference/ri_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get object from iRODS collection — ri_get","text":"","code":"ri_get(   object,   collection = ri_getCollection(),   datadir = ri_getDatadir(),   filename = object,   overwrite = FALSE )"},{"path":"/reference/ri_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get object from iRODS collection — ri_get","text":"object name data object collection iRODS collection data object resides datadir local directory store retrieved data object filename filename retrieved data object overwrite file overwritting allready exists","code":""},{"path":"/reference/ri_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get object from iRODS collection — ri_get","text":"nothing","code":""},{"path":"/reference/ri_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get object from iRODS collection — ri_get","text":"function retrieves data object iRODS collection. default behaviour get object default collection (see ri_setCollection)  store local data directory (see ri_setDatadir ) using data object's name filename. Using arguments collection, datadir, filename possible override default behaviour. file overwritten allready exists data directory, use overwrite argument force writing file. file exists overwrite=FALSE, function generate error","code":""},{"path":"/reference/ri_getCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default IRODS collection — ri_getCollection","title":"Get the default IRODS collection — ri_getCollection","text":"function returns default IRODS collection set ri_setCollection.","code":""},{"path":"/reference/ri_getCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default IRODS collection — ri_getCollection","text":"","code":"ri_getCollection()"},{"path":"/reference/ri_getCollection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default IRODS collection — ri_getCollection","text":"string name default iRODS collection","code":""},{"path":"/reference/ri_getCollection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the default IRODS collection — ri_getCollection","text":"function arguments package uses default collection, must set manually ri_setCollection. manipulate (store/retrieve etc) data objects, assumed exists default collection, unless provide specific collection function arguments. Many functions ricmd package call function collection provided argument functions. shortcut prevent user must provide full path collection time user manipulates data object.","code":""},{"path":"/reference/ri_listDataObjects.html","id":null,"dir":"Reference","previous_headings":"","what":"List data objects wihtin a collection — ri_listDataObjects","title":"List data objects wihtin a collection — ri_listDataObjects","text":"Provides list data objects within collection. collection either default collection collection specfied argument.","code":""},{"path":"/reference/ri_listDataObjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List data objects wihtin a collection — ri_listDataObjects","text":"","code":"ri_listDataObjects(collection = ri_getCollection())"},{"path":"/reference/ri_listDataObjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List data objects wihtin a collection — ri_listDataObjects","text":"collection name collection, provided, default collection.","code":""},{"path":"/reference/ri_listDataObjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List data objects wihtin a collection — ri_listDataObjects","text":"character vector names dataobjects","code":""},{"path":"/reference/ri_listDataObjects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List data objects wihtin a collection — ri_listDataObjects","text":"see ri_setCollection set default collection.","code":""},{"path":"/reference/ri_listSubCollections.html","id":null,"dir":"Reference","previous_headings":"","what":"List subcollections wihtin a collection — ri_listSubCollections","title":"List subcollections wihtin a collection — ri_listSubCollections","text":"Provides list subcollections within collection. collection either default collection collection specfied argument","code":""},{"path":"/reference/ri_listSubCollections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List subcollections wihtin a collection — ri_listSubCollections","text":"","code":"ri_listSubCollections(collection = ri_getCollection())"},{"path":"/reference/ri_listSubCollections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List subcollections wihtin a collection — ri_listSubCollections","text":"collection NULL default collection, either name collection list dataobjects","code":""},{"path":"/reference/ri_listSubCollections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List subcollections wihtin a collection — ri_listSubCollections","text":"character vector names subcollections","code":""},{"path":"/reference/ri_listSubCollections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List subcollections wihtin a collection — ri_listSubCollections","text":"see ri_setCollection set default collection.","code":""},{"path":"/reference/ri_metaAdd.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds meta data (AVU triple) to iRODS data object — ri_metaAdd","title":"Adds meta data (AVU triple) to iRODS data object — ri_metaAdd","text":"Adds meta data iRODS data object. Meta data consists attribute - value - unit triples (AVU triples). function adds meta data data objects. Adding meta data collections, users etc. (yet) possible.","code":""},{"path":"/reference/ri_metaAdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds meta data (AVU triple) to iRODS data object — ri_metaAdd","text":"","code":"ri_metaAdd(   object,   attribute,   value,   collection = ri_getCollection(),   units = NULL )"},{"path":"/reference/ri_metaAdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds meta data (AVU triple) to iRODS data object — ri_metaAdd","text":"object name data object attribute name attribute value value attribute collection iRODS collection data object resides. collection provided, uses default collection. units unit attribute, NULL provided","code":""},{"path":"/reference/ri_metaAdd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds meta data (AVU triple) to iRODS data object — ri_metaAdd","text":"nothing","code":""},{"path":"/reference/ri_metaAdd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds meta data (AVU triple) to iRODS data object — ri_metaAdd","text":"iRODS uses AVU triples (attribute - value - unit) store meta data data objects, collections users etc. function can used add meta data data objects. attribute value obligatory. unit provided, defaults NULL. AVU triple must unique combination attribute, value, unit. two tripples attribute, value must differ, , tripples attribute value, unit must differ. collection argument provided, default collection assumed (see ri_setCollection). AVU tripple allready exists, overwritten, since meta data allready added object.","code":""},{"path":"/reference/ri_metaExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if meta data exists — ri_metaExists","title":"Check if meta data exists — ri_metaExists","text":"Checks AVU triple allready exists meta data iRODS data object","code":""},{"path":"/reference/ri_metaExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if meta data exists — ri_metaExists","text":"","code":"ri_metaExists(   object,   attribute,   value,   units = NULL,   collection = ri_getCollection() )"},{"path":"/reference/ri_metaExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if meta data exists — ri_metaExists","text":"object name data object attribute name attribute value value attribute units unit attribute, NULL provided collection iRODS collection data object resides, provided, default collection used","code":""},{"path":"/reference/ri_metaExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if meta data exists — ri_metaExists","text":"TRUE AVU tripple exists, FALSE otherwise","code":""},{"path":"/reference/ri_metaGet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all meta data from an iRODS object — ri_metaGet","title":"Get all meta data from an iRODS object — ri_metaGet","text":"function retrieves meta data, .e. AVU triples, iRODS data object.","code":""},{"path":"/reference/ri_metaGet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all meta data from an iRODS object — ri_metaGet","text":"","code":"ri_metaGet(object, collection = ri_getCollection(), return_list = FALSE)"},{"path":"/reference/ri_metaGet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all meta data from an iRODS object — ri_metaGet","text":"object name data object collection iRODS collection data object resides return_list Returns metadata list object","code":""},{"path":"/reference/ri_metaGet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all meta data from an iRODS object — ri_metaGet","text":"data.frame three fields attribute, value units data function returns meta data iRODS data object data.frame. data.frame 3 columns: attribute, value units, corresponding attribute, value, unit tripple iRODS catalog return_list TRUE internal representation meta data returned attribute","code":""},{"path":"/reference/ri_metaRemove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove meta data from an object — ri_metaRemove","title":"Remove meta data from an object — ri_metaRemove","text":"Removes Attribute-Value-Units (AVU) triple object","code":""},{"path":"/reference/ri_metaRemove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove meta data from an object — ri_metaRemove","text":"","code":"ri_metaRemove(   object,   attribute,   value,   collection = ri_getCollection(),   units = NULL )"},{"path":"/reference/ri_metaRemove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove meta data from an object — ri_metaRemove","text":"object name data object attribute name attribute value value attribute collection iRODS collection data object resides, provided, default collection used units unit attribute, NULL provided","code":""},{"path":"/reference/ri_objectExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data objects exists — ri_objectExists","title":"Check if data objects exists — ri_objectExists","text":"function checks object exists collection. collection either default collection collection specified collection argument.","code":""},{"path":"/reference/ri_objectExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data objects exists — ri_objectExists","text":"","code":"ri_objectExists(object, collection = ri_getCollection())"},{"path":"/reference/ri_objectExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data objects exists — ri_objectExists","text":"object name object collection name collection, given, uses default collection","code":""},{"path":"/reference/ri_objectExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data objects exists — ri_objectExists","text":"TRUE object exists, FALSE otherwise","code":""},{"path":"/reference/ri_put.html","id":null,"dir":"Reference","previous_headings":"","what":"Store data object in iRODS collection — ri_put","title":"Store data object in iRODS collection — ri_put","text":"Stores data object iRODS collection. data object allready exists, overwritten default","code":""},{"path":"/reference/ri_put.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store data object in iRODS collection — ri_put","text":"","code":"ri_put(   filename,   collection = ri_getCollection(),   object = NULL,   overwrite = FALSE )"},{"path":"/reference/ri_put.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store data object in iRODS collection — ri_put","text":"filename filename path file store collection name collection store data, provided uses default collection object name data object, defaults basename path given file argument overwrite overwrite existing data objects, default FALSE","code":""},{"path":"/reference/ri_removeCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes a iRODS collection — ri_removeCollection","title":"Removes a iRODS collection — ri_removeCollection","text":"function removes iRODS collection. collection must empty. collection can removed, function generates error.","code":""},{"path":"/reference/ri_removeCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes a iRODS collection — ri_removeCollection","text":"","code":"ri_removeCollection(collection)"},{"path":"/reference/ri_removeCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes a iRODS collection — ri_removeCollection","text":"collection name collection remove","code":""},{"path":"/reference/ri_rm.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a data object — ri_rm","title":"Delete a data object — ri_rm","text":"Remove data object iRODS collection. data object exists, silently ignored","code":""},{"path":"/reference/ri_rm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a data object — ri_rm","text":"","code":"ri_rm(object, collection = ri_getCollection())"},{"path":"/reference/ri_rm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a data object — ri_rm","text":"object name object collection collection object, collection provided uses default collection","code":""},{"path":"/reference/ri_rm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a data object — ri_rm","text":"nothing","code":""},{"path":"/reference/ri_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Starts an R - IRODS session — ri_session","title":"Starts an R - IRODS session — ri_session","text":"functions reads IRODS environment file starts IRODS session","code":""},{"path":"/reference/ri_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starts an R - IRODS session — ri_session","text":"","code":"ri_session(env = path.expand(\"~/.irods/irods_environment.json\"))"},{"path":"/reference/ri_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Starts an R - IRODS session — ri_session","text":"env name IRODS environment configuration","code":""},{"path":"/reference/ri_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Starts an R - IRODS session — ri_session","text":"nothing","code":""},{"path":"/reference/ri_setCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the default collection — ri_setCollection","title":"Set the default collection — ri_setCollection","text":"functions sets default collection user","code":""},{"path":"/reference/ri_setCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the default collection — ri_setCollection","text":"","code":"ri_setCollection(collection)"},{"path":"/reference/ri_setCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the default collection — ri_setCollection","text":"collection path default IRODS collection","code":""},{"path":"/reference/ri_setCollection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the default collection — ri_setCollection","text":"Many function package use default collection storing retrieving data objects. default collection must set user initialisation IRODS session ri_session.","code":""},{"path":"/reference/ri_setDatadir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the default data directory — ri_setDatadir","title":"Set the default data directory — ri_setDatadir","text":"functions sets default data directory user. directory must exists, otherwise function generates error","code":""},{"path":"/reference/ri_setDatadir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the default data directory — ri_setDatadir","text":"","code":"ri_setDatadir(datadir)"},{"path":"/reference/ri_setDatadir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the default data directory — ri_setDatadir","text":"datadir path default data directory.","code":""},{"path":"/reference/ri_setDatadir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the default data directory — ri_setDatadir","text":"Local data files stored iRODS system data objects. data directory default directory package retrieves stores files.","code":""},{"path":"/reference/ri_test_auth_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, checks if iRODS auth file exists — ri_test_auth_file_exists","title":"ricmd test function, checks if iRODS auth file exists — ri_test_auth_file_exists","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. Checks iRODS auth file exists","code":""},{"path":"/reference/ri_test_auth_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, checks if iRODS auth file exists — ri_test_auth_file_exists","text":"","code":"ri_test_auth_file_exists(irods_dir = path.expand(\"~/.irods\"))"},{"path":"/reference/ri_test_auth_file_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, checks if iRODS auth file exists — ri_test_auth_file_exists","text":"irods_dir iRODS configuration dir, defailts ~/.irods","code":""},{"path":"/reference/ri_test_check_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, check docker — ri_test_check_docker","title":"ricmd test function, check docker — ri_test_check_docker","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. Checks docker environment exists","code":""},{"path":"/reference/ri_test_check_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, check docker — ri_test_check_docker","text":"","code":"ri_test_check_docker(verbose = FALSE)"},{"path":"/reference/ri_test_check_docker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, check docker — ri_test_check_docker","text":"verbose Give verbose output Check Docker installed can accessed without sudo rights. Function copied rirods package, https://github.com/irods/irods_client_library_rirods, Martin Schobben","code":""},{"path":"/reference/ri_test_create_auth_file.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, creates dummy auth file — ri_test_create_auth_file","title":"ricmd test function, creates dummy auth file — ri_test_create_auth_file","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. creates dummy auth file","code":""},{"path":"/reference/ri_test_create_auth_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, creates dummy auth file — ri_test_create_auth_file","text":"","code":"ri_test_create_auth_file(irods_dir = path.expand(\"~/.irods\"), verbose = TRUE)"},{"path":"/reference/ri_test_create_auth_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, creates dummy auth file — ri_test_create_auth_file","text":"irods_dir iRODS configuration dir, defailts ~/.irods verbose verbose Due quirk iRODS python library, auth file must exist othewrwise non interactive connection possible","code":""},{"path":"/reference/ri_test_create_demo_env.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, creates demo environment file — ri_test_create_demo_env","title":"ricmd test function, creates demo environment file — ri_test_create_demo_env","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. creates demo environment file","code":""},{"path":"/reference/ri_test_create_demo_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, creates demo environment file — ri_test_create_demo_env","text":"","code":"ri_test_create_demo_env(irods_ip)"},{"path":"/reference/ri_test_create_demo_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, creates demo environment file — ri_test_create_demo_env","text":"irods_dir iRODS configuration dir, defailts ~/.irods verbose verbose function creates environment file connect irods_demo Docker clusters","code":""},{"path":"/reference/ri_test_get_catalog_provider_ip.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, get catalog provider ip — ri_test_get_catalog_provider_ip","title":"ricmd test function, get catalog provider ip — ri_test_get_catalog_provider_ip","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. looks ip iRODS catalog provider","code":""},{"path":"/reference/ri_test_get_catalog_provider_ip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, get catalog provider ip — ri_test_get_catalog_provider_ip","text":"","code":"ri_test_get_catalog_provider_ip(verbose = FALSE)"},{"path":"/reference/ri_test_get_catalog_provider_ip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, get catalog provider ip — ri_test_get_catalog_provider_ip","text":"verbose verbose","code":""},{"path":"/reference/ri_test_valid_ip.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, test valid ip — ri_test_valid_ip","title":"ricmd test function, test valid ip — ri_test_valid_ip","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. Checks ip address valid","code":""},{"path":"/reference/ri_test_valid_ip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, test valid ip — ri_test_valid_ip","text":"","code":"ri_test_valid_ip(ip)"},{"path":"/reference/ri_test_valid_ip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, test valid ip — ri_test_valid_ip","text":"ip ip address character","code":""},{"path":"/reference/ri_test_valid_session.html","id":null,"dir":"Reference","previous_headings":"","what":"ricmd test function, creates demo environment file — ri_test_valid_session","title":"ricmd test function, creates demo environment file — ri_test_valid_session","text":"ri_test_... functions meant package testing setting demo environment. functions intended package users. tests iRODS session object valid","code":""},{"path":"/reference/ri_test_valid_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ricmd test function, creates demo environment file — ri_test_valid_session","text":"","code":"ri_test_valid_session(session)"},{"path":"/reference/ri_test_valid_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ricmd test function, creates demo environment file — ri_test_valid_session","text":"session iRODS session object valid session object contains iRODS connection. function tests username present connection. , connection considered valid function returns TRUE","code":""},{"path":"/news/index.html","id":"ricmd-100","dir":"Changelog","previous_headings":"","what":"ricmd 1.0.0","title":"ricmd 1.0.0","text":"Initial release","code":""},{"path":"/news/index.html","id":"ricmd-001","dir":"Changelog","previous_headings":"","what":"ricmd 0.0.1","title":"ricmd 0.0.1","text":"Development version","code":""}]
